'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="master")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertItemMaster(instance As ItemMaster)
    End Sub
  Partial Private Sub UpdateItemMaster(instance As ItemMaster)
    End Sub
  Partial Private Sub DeleteItemMaster(instance As ItemMaster)
    End Sub
  Partial Private Sub InsertItemDetail(instance As ItemDetail)
    End Sub
  Partial Private Sub UpdateItemDetail(instance As ItemDetail)
    End Sub
  Partial Private Sub DeleteItemDetail(instance As ItemDetail)
    End Sub
  #End Region
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ItemMasters() As System.Data.Linq.Table(Of ItemMaster)
		Get
			Return Me.GetTable(Of ItemMaster)
		End Get
	End Property
	
	Public ReadOnly Property ItemDetails() As System.Data.Linq.Table(Of ItemDetail)
		Get
			Return Me.GetTable(Of ItemDetail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ItemMaster")>  _
Partial Public Class ItemMaster
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _PN As String
	
	Private _ItemDetails As EntitySet(Of ItemDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPNChanging(value As String)
    End Sub
    Partial Private Sub OnPNChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ItemDetails = New EntitySet(Of ItemDetail)(AddressOf Me.attach_ItemDetails, AddressOf Me.detach_ItemDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PN", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PN() As String
		Get
			Return Me._PN
		End Get
		Set
			If (String.Equals(Me._PN, value) = false) Then
				Me.OnPNChanging(value)
				Me.SendPropertyChanging
				Me._PN = value
				Me.SendPropertyChanged("PN")
				Me.OnPNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemMaster_ItemDetail", Storage:="_ItemDetails", ThisKey:="ID", OtherKey:="ID")>  _
	Public Property ItemDetails() As EntitySet(Of ItemDetail)
		Get
			Return Me._ItemDetails
		End Get
		Set
			Me._ItemDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ItemDetails(ByVal entity As ItemDetail)
		Me.SendPropertyChanging
		entity.ItemMaster = Me
	End Sub
	
	Private Sub detach_ItemDetails(ByVal entity As ItemDetail)
		Me.SendPropertyChanging
		entity.ItemMaster = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ItemDetail")>  _
Partial Public Class ItemDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _SalesOrg As String
	
	Private _Price As Decimal
	
	Private _ItemMaster As EntityRef(Of ItemMaster)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSalesOrgChanging(value As String)
    End Sub
    Partial Private Sub OnSalesOrgChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ItemMaster = CType(Nothing, EntityRef(Of ItemMaster))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._ItemMaster.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesOrg", DbType:="Char(4) NOT NULL", CanBeNull:=false)>  _
	Public Property SalesOrg() As String
		Get
			Return Me._SalesOrg
		End Get
		Set
			If (String.Equals(Me._SalesOrg, value) = false) Then
				Me.OnSalesOrgChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrg = value
				Me.SendPropertyChanged("SalesOrg")
				Me.OnSalesOrgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(18,6) NOT NULL")>  _
	Public Property Price() As Decimal
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemMaster_ItemDetail", Storage:="_ItemMaster", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ItemMaster() As ItemMaster
		Get
			Return Me._ItemMaster.Entity
		End Get
		Set
			Dim previousValue As ItemMaster = Me._ItemMaster.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ItemMaster.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ItemMaster.Entity = Nothing
					previousValue.ItemDetails.Remove(Me)
				End If
				Me._ItemMaster.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ItemDetails.Add(Me)
					Me._ID = value.ID
				Else
					Me._ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ItemMaster")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
